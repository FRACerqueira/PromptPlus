<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AnyKey" xml:space="preserve">
    <value>Press any key</value>
  </data>
  <data name="CanceledText" xml:space="preserve">
    <value>Canceled</value>
  </data>
  <data name="EmptyTitle" xml:space="preserve">
    <value>Empty Title</value>
  </data>
  <data name="EnterFininsh" xml:space="preserve">
    <value>Enter: Finish</value>
  </data>
  <data name="EscCancel" xml:space="preserve">
    <value>, {0}: To cancel</value>
  </data>
  <data name="EscCancelWithPipeline" xml:space="preserve">
    <value>, {0}: Cancel pipe, {1}: Cancel all pipes</value>
  </data>
  <data name="EscCancelWithPipeNotAll" xml:space="preserve">
    <value>, {0}: Cancel pipe</value>
  </data>
  <data name="FileNotSelected" xml:space="preserve">
    <value>item not a file!</value>
  </data>
  <data name="FolderCurrentPath" xml:space="preserve">
    <value>Folder:</value>
  </data>
  <data name="FolderKeyNavigation" xml:space="preserve">
    <value>Ctrl+Left/Right: Dry folder, Enter: Select, {0}: Filter</value>
  </data>
  <data name="Invalid" xml:space="preserve">
    <value>Value is invalid</value>
  </data>
  <data name="ItemsFiltered" xml:space="preserve">
    <value>Items Filtered!</value>
  </data>
  <data name="KeyNavPaging" xml:space="preserve">
    <value>PgUp/PgDown: Page, </value>
  </data>
  <data name="ListItemAlreadyexists" xml:space="preserve">
    <value>Item already exists</value>
  </data>
  <data name="ListKeyNavigation" xml:space="preserve">
    <value>Ctrl+Del: Remove seleted , {0}: Remove all, Enter: Finish</value>
  </data>
  <data name="ListMaxSelection" xml:space="preserve">
    <value>A maximum input of {0} items has already been reached</value>
  </data>
  <data name="ListMinSelection" xml:space="preserve">
    <value>A minimum input of {0} items is required</value>
  </data>
  <data name="LongNoKey" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="LongYesKey" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="MaxLength" xml:space="preserve">
    <value>Value is too long. Max({0})</value>
  </data>
  <data name="MinLength" xml:space="preserve">
    <value>Value is too short. Min({0})</value>
  </data>
  <data name="MultiSelectKeyNavigation" xml:space="preserve">
    <value>{0} Select/Unselect, Enter: Finish, {1}: Filter, {2}: All, {3}:Invert</value>
  </data>
  <data name="MultiSelectMaxSelection" xml:space="preserve">
    <value>A maximum selection of {0} items has already been reached</value>
  </data>
  <data name="MultiSelectMinSelection" xml:space="preserve">
    <value>A minimum selection of {0} items is required</value>
  </data>
  <data name="NoKey" xml:space="preserve">
    <value>N</value>
  </data>
  <data name="NoMatchRegex" xml:space="preserve">
    <value>Value is not match pattern</value>
  </data>
  <data name="OffValue" xml:space="preserve">
    <value>Off</value>
  </data>
  <data name="OnValue" xml:space="preserve">
    <value>On</value>
  </data>
  <data name="PaginationTemplate" xml:space="preserve">
    <value>  {0} items, {1}/{2} pages</value>
  </data>
  <data name="PipeLineText" xml:space="preserve">
    <value>Pipes summary</value>
  </data>
  <data name="PressedKey" xml:space="preserve">
    <value>Pressed key</value>
  </data>
  <data name="Required" xml:space="preserve">
    <value>Value is required</value>
  </data>
  <data name="ResizedTerminal" xml:space="preserve">
    <value>Terminal has resized!</value>
  </data>
  <data name="ResizeTerminal" xml:space="preserve">
    <value>Resize : {0} to {1} rows...Press any key.</value>
  </data>
  <data name="RunningText" xml:space="preserve">
    <value>Running</value>
  </data>
  <data name="SelectKeyNavigation" xml:space="preserve">
    <value>Enter: Select, {0}: Filter</value>
  </data>
  <data name="ShowKeyPressStandardHotKeys" xml:space="preserve">
    <value>{0}{1}</value>
  </data>
  <data name="ShowKeyPressStandardHotKeysWithPipeline" xml:space="preserve">
    <value>{0}, {1} Swith pipes summary{2}</value>
  </data>
  <data name="ShowProcessStandardHotKeysWithPipeline" xml:space="preserve">
    <value>{0}, Toggle pipes summary{1}</value>
  </data>
  <data name="ShowStandardHotKeys" xml:space="preserve">
    <value>{0} Toggle tooltips{1}</value>
  </data>
  <data name="ShowStandardHotKeysWithPipeline" xml:space="preserve">
    <value>{0} Toggle tooltips, {1} Toggle pipes summary{2}</value>
  </data>
  <data name="SkipedText" xml:space="preserve">
    <value>Skiped</value>
  </data>
  <data name="SliderNumberKeyNavigator" xml:space="preserve">
    <value>Left/Right: Short change, Crtl+Left/Right: Larger change, Enter: Finish</value>
  </data>
  <data name="SliderSwitcheKeyNavigator" xml:space="preserve">
    <value>, Left/Right: Change, Enter: Finish</value>
  </data>
  <data name="SummaryPipelineReturnto" xml:space="preserve">
    <value>return to</value>
  </data>
  <data name="WaittingProcess" xml:space="preserve">
    <value>Waiting {0} of {1}</value>
  </data>
  <data name="WaittingText" xml:space="preserve">
    <value>Waiting</value>
  </data>
  <data name="YesKey" xml:space="preserve">
    <value>Y</value>
  </data>
  <data name="PasswordStandardHotkeys" xml:space="preserve">
    <value>{0}, {1}:Toggle password</value>
  </data>
  <data name="MaskEditPosNumeric" xml:space="preserve">
    <value>Numeric</value>
  </data>
  <data name="MaskEditPosLetter" xml:space="preserve">
    <value>Letter</value>
  </data>
  <data name="MaskEditPosCustom" xml:space="preserve">
    <value>Only({0})</value>
  </data>
  <data name="MaskEditPosAnyChar" xml:space="preserve">
    <value>Any char</value>
  </data>
  <data name="MaskEditPosDay" xml:space="preserve">
    <value>Day</value>
  </data>
  <data name="MaskEditPosMonth" xml:space="preserve">
    <value>Month</value>
  </data>
  <data name="MaskEditPosYear" xml:space="preserve">
    <value>Year</value>
  </data>
  <data name="MaskEditPosHour" xml:space="preserve">
    <value>Hour</value>
  </data>
  <data name="MaskEditPosMinute" xml:space="preserve">
    <value>Minute</value>
  </data>
  <data name="MaskEditPosSecond" xml:space="preserve">
    <value>Second</value>
  </data>
  <data name="MaskEditErase" xml:space="preserve">
    <value>,Ctrl+Del: Erase all</value>
  </data>
  <data name="MaskEditInputType" xml:space="preserve">
    <value>Input type: {0}</value>
  </data>
  <data name="InvalidTypeByte" xml:space="preserve">
    <value>Invalid value for number (-128 to 127)</value>
  </data>
  <data name="InvalidTypeBoolean" xml:space="preserve">
    <value>Invalid value for number boolean(0:False/1:True)</value>
  </data>
  <data name="InvalidTypeChar" xml:space="preserve">
    <value>Invalid value for single character</value>
  </data>
  <data name="InvalidTypeDateTime" xml:space="preserve">
    <value>Invalid value for Date({0})/Time({1})</value>
  </data>
  <data name="InvalidTypeNumber" xml:space="preserve">
    <value>Invalid value for number</value>
  </data>
  <data name="FinishResultList" xml:space="preserve">
    <value>Finish with {0} items</value>
  </data>
  <data name="FinishResultTasks" xml:space="preserve">
    <value>Finish all tasks({0})</value>
  </data>
  <data name="NumberUpDownKeyNavigator" xml:space="preserve">
    <value>Up/Down: Short change, Crtl+Left/Right: Larger change, Enter: Finish</value>
  </data>
  <data name="AutoCompleteKeyNavigation" xml:space="preserve">
    <value>Enter: Select, {0}: Unselect, Ctrl-Enter: Update text input</value>
  </data>
  <data name="AutoCompleteKeyNotfound" xml:space="preserve">
    <value>{0} not found in sugestions</value>
  </data>
  <data name="ShowStandardHotKeysDesc" xml:space="preserve">
    <value>{0} Toggle tooltips, {1} Toggle description{2}</value>
  </data>
  <data name="ShowStandardHotKeysWithPipelineDesc" xml:space="preserve">
    <value>{0} Toggle tooltips, {1} Toggle description, {2} Toggle pipes summary{3}</value>
  </data>
  <data name="HotKeyDescription" xml:space="preserve">
    <value>{0} Show/Hide description</value>
  </data>
  <data name="EscCancelWizard" xml:space="preserve">
    <value>, {0}: To Wizard</value>
  </data>
  <data name="ListKeyNavigationFillZeros" xml:space="preserve">
    <value>Ctrl+Del: Remove seleted , {0}: Remove all, Ctrl+Enter: Finish, Enter: Add</value>
  </data>
  <data name="ReadlineFisnishHistoryhit" xml:space="preserve">
    <value>Enter: Select&amp;Fisnish</value>
  </data>
  <data name="ReadlineHistoryEsc" xml:space="preserve">
    <value>Esc: Cancel historic</value>
  </data>
  <data name="ReadlineHistoryhit" xml:space="preserve">
    <value>Down/PgDown: Historic(Min. {0} chars), Ctrl+Del:Clear historic</value>
  </data>
  <data name="ReadlineNotFisnishHistoryhit" xml:space="preserve">
    <value>Enter: Select&amp;Close</value>
  </data>
  <data name="ReadlineSugestionhit" xml:space="preserve">
    <value>Tab/Shift: Sugestions</value>
  </data>
  <data name="ReadlineSugestionMode" xml:space="preserve">
    <value>Esc: Cancel sugestion</value>
  </data>
  <data name="EnterAcceptSugestion" xml:space="preserve">
    <value>Enter: Accept suggestion</value>
  </data>
</root>