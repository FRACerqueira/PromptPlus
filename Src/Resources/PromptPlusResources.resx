<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AnyKey" xml:space="preserve">
    <value>Press any key </value>
  </data>
  <data name="CanceledKey" xml:space="preserve">
    <value>Canceled</value>
  </data>
  <data name="CurrentFolder" xml:space="preserve">
    <value>Current folder</value>
  </data>
  <data name="CurrentSelected" xml:space="preserve">
    <value>Current selected</value>
  </data>
  <data name="EditMode" xml:space="preserve">
    <value>Edit mode</value>
  </data>
  <data name="Filter" xml:space="preserve">
    <value>Filter</value>
  </data>
  <data name="Group" xml:space="preserve">
    <value>Group</value>
  </data>
  <data name="InputFinishEnter" xml:space="preserve">
    <value>Enter:Finish</value>
  </data>
  <data name="InvalidMask" xml:space="preserve">
    <value>Invalid Mask</value>
  </data>
  <data name="ListItemAlreadyexists" xml:space="preserve">
    <value>Item already exists</value>
  </data>
  <data name="ListMaxSelection" xml:space="preserve">
    <value>A maximum input of {0} items has already been reached</value>
  </data>
  <data name="ListMinSelection" xml:space="preserve">
    <value>A minimum input of {0} items is required</value>
  </data>
  <data name="MaskEditErase" xml:space="preserve">
    <value>Ctrl+Del/Ctrl+L:Erase all, Home/End:Jump</value>
  </data>
  <data name="MaskEditJump" xml:space="preserve">
    <value>{0}:Next part </value>
  </data>
  <data name="MaskEditPosAnyChar" xml:space="preserve">
    <value>Any char</value>
  </data>
  <data name="MaskEditPosCustom" xml:space="preserve">
    <value>Only({0})</value>
  </data>
  <data name="MaskEditPosDay" xml:space="preserve">
    <value>Day</value>
  </data>
  <data name="MaskEditPosHour" xml:space="preserve">
    <value>Hour</value>
  </data>
  <data name="MaskEditPosLetter" xml:space="preserve">
    <value>Letter</value>
  </data>
  <data name="MaskEditPosMinute" xml:space="preserve">
    <value>Minute</value>
  </data>
  <data name="MaskEditPosMonth" xml:space="preserve">
    <value>Month</value>
  </data>
  <data name="MaskEditPosNumeric" xml:space="preserve">
    <value>Numeric</value>
  </data>
  <data name="MaskEditPosSecond" xml:space="preserve">
    <value>Second</value>
  </data>
  <data name="MaskEditPosYear" xml:space="preserve">
    <value>Year</value>
  </data>
  <data name="MoveDays" xml:space="preserve">
    <value>Left/Right:Change Day</value>
  </data>
  <data name="MoveDayWeek" xml:space="preserve">
    <value>Up/Down:Change Day with same Day of Week</value>
  </data>
  <data name="MoveMonth" xml:space="preserve">
    <value>Tab/Shift Tab:Change Month</value>
  </data>
  <data name="MoveToday" xml:space="preserve">
    <value>Home:Today</value>
  </data>
  <data name="MoveYear" xml:space="preserve">
    <value>PgUp/PgDown:Change Year</value>
  </data>
  <data name="MultiSelectFinishEnter" xml:space="preserve">
    <value>Enter:Finish, Space:Check/Uncheck</value>
  </data>
  <data name="MultiSelectMaxSelection" xml:space="preserve">
    <value>Maximum item selection({0}) has been exceeded</value>
  </data>
  <data name="MultiSelectMinSelection" xml:space="preserve">
    <value>A minimum selection of {0} items is required</value>
  </data>
  <data name="NoChar" xml:space="preserve">
    <value>N</value>
  </data>
  <data name="OffValue" xml:space="preserve">
    <value>Off</value>
  </data>
  <data name="OnValue" xml:space="preserve">
    <value>On</value>
  </data>
  <data name="OrderHighest" xml:space="preserve">
    <value>Highest value</value>
  </data>
  <data name="OrderLabelAsc" xml:space="preserve">
    <value>Label ascending</value>
  </data>
  <data name="OrderLabelDec" xml:space="preserve">
    <value>Label descending</value>
  </data>
  <data name="OrderSmallest" xml:space="preserve">
    <value>Smallest value</value>
  </data>
  <data name="OrderStandard" xml:space="preserve">
    <value>Standard</value>
  </data>
  <data name="PaginationTemplate" xml:space="preserve">
    <value>{0} items, {1}/{2} pages</value>
  </data>
  <data name="PaginatorHome" xml:space="preserve">
    <value>Home:Fist Page</value>
  </data>
  <data name="PressedKey" xml:space="preserve">
    <value>Pressed key</value>
  </data>
  <data name="SelectFinishEnter" xml:space="preserve">
    <value>Enter:Finish</value>
  </data>
  <data name="SelectionDisabled" xml:space="preserve">
    <value>Item disabled</value>
  </data>
  <data name="SelectionInvalid" xml:space="preserve">
    <value>Selection Invalid</value>
  </data>
  <data name="SliderNumberLeftRightKeyNavigator" xml:space="preserve">
    <value>Left/Right:Short change, Tab/Shift+Tab:Larger change, Enter:Finish</value>
  </data>
  <data name="SliderNumberUpDownKeyNavigator" xml:space="preserve">
    <value>Up/Down:Short change, Tab/Shift+Tab:Larger change, Enter:Finish</value>
  </data>
  <data name="SliderSwitchKeyNavigator" xml:space="preserve">
    <value>Left/Right:Change, Enter:Finish</value>
  </data>
  <data name="TableMoveCols" xml:space="preserve">
    <value>Left/Right:Move column</value>
  </data>
  <data name="TooltipAbortEdit" xml:space="preserve">
    <value>Esc:Cancel Edit</value>
  </data>
  <data name="TooltipCancelEsc" xml:space="preserve">
    <value>{0}:To cancel</value>
  </data>
  <data name="TooltipChart" xml:space="preserve">
    <value>Up/Down/PgUp/PgDown:Move</value>
  </data>
  <data name="TooltipChartSwitchLegend" xml:space="preserve">
    <value>{0}:Switch view legend</value>
  </data>
  <data name="TooltipChartSwitchOrder" xml:space="preserve">
    <value>{0}:Switch order view</value>
  </data>
  <data name="TooltipChartSwitchType" xml:space="preserve">
    <value>{0}:Toggle Chart type</value>
  </data>
  <data name="TooltipEditItem" xml:space="preserve">
    <value>{0}:Edit item</value>
  </data>
  <data name="TooltipEnterPressList" xml:space="preserve">
    <value>Enter:Add, Ctrl+Enter:Finish</value>
  </data>
  <data name="TooltipFullPath" xml:space="preserve">
    <value>{0}:Toggle Full Path</value>
  </data>
  <data name="TooltipHistoryClear" xml:space="preserve">
    <value>Ctrl+Del:Clear historic</value>
  </data>
  <data name="TooltipHistoryEsc" xml:space="preserve">
    <value>Esc:Cancel historic</value>
  </data>
  <data name="TooltipHistoryToggle" xml:space="preserve">
    <value>Down/PgDown:Historic(Min. {0} chars)</value>
  </data>
  <data name="TooltipInvertSelectAll" xml:space="preserve">
    <value>{0}:Invert Selected</value>
  </data>
  <data name="TooltipOrder" xml:space="preserve">
    <value>Ordination: {0}</value>
  </data>
  <data name="TooltipPages" xml:space="preserve">
    <value>Up/Down/PgUp/PgDown:Move Selector</value>
  </data>
  <data name="TooltipPagesNotes" xml:space="preserve">
    <value>Up/Down/PgUp/PgDown:Move Notes</value>
  </data>
  <data name="TooltipPressSpace" xml:space="preserve">
    <value>Shift Space:Space</value>
  </data>
  <data name="TooltipRemoveItem" xml:space="preserve">
    <value>{0}:Remove item</value>
  </data>
  <data name="TooltipSelectAll" xml:space="preserve">
    <value>{0}:Select All</value>
  </data>
  <data name="TooltipSelectFilter" xml:space="preserve">
    <value>Filter:Enter text to filter the items</value>
  </data>
  <data name="TooltipSuggestionEsc" xml:space="preserve">
    <value>Esc:Cancel suggestion</value>
  </data>
  <data name="TooltipSuggestionToggle" xml:space="preserve">
    <value>Tab/Shift Tab:Suggestions</value>
  </data>
  <data name="TooltipToggle" xml:space="preserve">
    <value>{0}:Toggle tooltips</value>
  </data>
  <data name="TooltipToggleExpandAllPress" xml:space="preserve">
    <value>{0}:Expand/Collapse All</value>
  </data>
  <data name="TooltipToggleExpandPress" xml:space="preserve">
    <value>{0}:Expand/Collapse</value>
  </data>
  <data name="TooltipToggleNotes" xml:space="preserve">
    <value>{0}:Toggle Notes</value>
  </data>
  <data name="TooltipViewPassword" xml:space="preserve">
    <value>{0}:Switch view password</value>
  </data>
  <data name="ValidAnyKey" xml:space="preserve">
    <value>Press a valid key</value>
  </data>
  <data name="ValidateInvalid" xml:space="preserve">
    <value>Invalid value!</value>
  </data>
  <data name="ValidateMaxLength" xml:space="preserve">
    <value>Value is too long. Max({0})</value>
  </data>
  <data name="ValidateMinLength" xml:space="preserve">
    <value>Value is too short. Min({0})</value>
  </data>
  <data name="ValidateNoMatchRegex" xml:space="preserve">
    <value>Value is not match pattern</value>
  </data>
  <data name="ValidateRequired" xml:space="preserve">
    <value>Required Value!</value>
  </data>
  <data name="Validkeys" xml:space="preserve">
    <value>Valid keys</value>
  </data>
  <data name="YesChar" xml:space="preserve">
    <value>Y</value>
  </data>
</root>